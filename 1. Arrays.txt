What is an Array?

Array is a linear data structure that stores a collection of elements (values), typically of the same type, in contiguous memory locations. Each element in an array is identified by its index, which represents the element's position within the array.


Key Concepts:
Contiguous Memory: The elements of an array are stored in contiguous (sequential) memory locations. This means that the memory addresses for each element are adjacent.
Indices: Each element in the array is associated with an index, starting from 0. The index is used to access each element in the array.


Key Characteristics of Arrays:
Fixed Size: Once an array is created, its size cannot be changed.
Same Data Type: All elements in the array must be of the same type (e.g., all integers or all strings).
Indexing: Elements in the array are accessed using their index, which starts from 0.


Memory Representation of Array

              Contiguous Memory Locations:
        100    104    108    112    116    120    124
      +------+------+------+------+------+------+------+
      |  5   | 12   |  7   |  9   |  3   | 15   | 20   |
      +------+------+------+------+------+------+------+
         0      1      2      3      4      5      6 
                 Index (starts from 0)




Declaring and Initializing Arrays in Java:

1. Declaring an Array
Before using an array, you need to declare it. In Java, the syntax for declaring an array is:
dataType[] arrayName;

For example:
int[] numbers;  // Declares an array of integers



2. Allocating Memory for the Array
Once an array is declared, you need to allocate memory (define its size) using the new keyword:
arrayName = new dataType[size];

For example:
numbers = new int[5];  // Allocates memory for 5 integers


3. Combining Declaration and Memory Allocation:
You can declare and allocate memory for an array in one step:
int[] numbers = new int[5];  // Declares an integer array and allocates memory for 5 elements


4. Initializing Array Elements:
You can assign values to array elements by using their index:
numbers[0] = 10;
numbers[1] = 20;
numbers[2] = 30;
numbers[3] = 40;
numbers[4] = 50;

Alternatively, you can initialize the array directly when declaring it:
int[] numbers = {10, 20, 30, 40, 50};



Accessing Array Elements:

Each element in an array has an index, starting from 0. You can access and manipulate(modify) elements by referring to their index:
System.out.println(numbers[0]);  // Output: 10
numbers[1] = 25;  // Changing the value at index 1
System.out.println(numbers[1]);  // Output: 25


Length of an Array:
In Java, you can find the length (number of elements) of an array using the .length attribute. For example:
int arrayLength = numbers.length;  // Returns the size of the array
System.out.println("Length of the array: " + arrayLength);



Initializing an Array Using a for Loop:

public class Array {
    public static void main(String[] args) {
        // Declare an array of 5 integers
        int[] numbers = new int[5];

        // Initialize the array using a for loop
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = i * 10;  // Assign value to each element (e.g., 0, 10, 20, etc.)
        }

        // Print the initialized array elements
        System.out.println("Array elements after initialization:");
        for (int i = 0; i < numbers.length; i++) {
            System.out.println("Element at index " + i + ": " + numbers[i]);
        }
    }
}

Output:
Array elements after initialization:
Element at index 0: 0
Element at index 1: 10
Element at index 2: 20
Element at index 3: 30
Element at index 4: 40



You can use Arrays.toString() to print the contents of an array directly in a readable format. Itâ€™s much more convenient than using a loop when you just want to print the array.

Initializing an Array with a for Loop and Printing with Arrays.toString()


import java.util.Arrays;  // Import the Arrays class
public class ArrayInitialization {
    public static void main(String[] args) {
        // Declare and allocate memory for an array of 5 integers
        int[] numbers = new int[5];

        // Initialize the array using a for loop
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = i * 10;  // Assign values like 0, 10, 20, etc.
        }

        // Print the entire array using Arrays.toString() method
        System.out.println("Array elements: " + Arrays.toString(numbers));
    }
}

Output:
Array elements: [0, 10, 20, 30, 40]

Key Points about Arrays.toString():
It's very useful for printing arrays quickly in a readable format.
Without this method, printing an array directly {System.out.println("Array elements: " + numbers);} would result in the array's memory address (e.g., [I@6d06d69c]), which is not useful.




Types of Arrays
One-Dimensional Array: The basic form of array we've discussed so far.

Example: int[] numbers = {1, 2, 3, 4, 5};
Two-Dimensional Array: An array of arrays, often used to represent tables or matrices.

Example:
int[][] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};


Advantages
Efficient memory allocation
Fast random access (O(1) time)
Simple and easy to use
Easy to iterate through elements
Widely used in algorithms
Supports multidimensional arrays


Disadvantages
Fixed size, cannot be resized
Inserting and deleting elements is slow
Wastes memory if oversized
Only stores homogeneous data types
Not flexible (no dynamic resizing)
Lack of built-in support for complex operations






Introduction to 2D Arrays :

suppose you want to store a set of test scores for a group of students across multiple subjects. You could use a 2D array where:

Each row represents a different student.
Each column represents a different subject.


Declaring a 2D Array
int[][] scores = new int[3][4];

int[][] indicates a 2D array of integers.
scores is the name of our array.
new int[3][4] creates a 3x4 grid, with 3 rows and 4 columns.

We can initialize a 2D array when we declare it,

int[][] scores = {
    {85, 90, 78, 92}, // Scores for student 1
    {88, 76, 93, 85}, // Scores for student 2
    {91, 82, 89, 77}  // Scores for student 3
};

This means:

scores[0][0] is 85 (first student, first subject).
scores[2][3] is 77 (third student, fourth subject).


Accessing Elements in a 2D Array :

To access or modify an element, 
int score = scores[1][2];  // Gets the score of the second student in the third subject
System.out.println("Score: " + score);

Or, to update a value:
scores[0][1] = 95; // Changes the score of the first student in the second subject to 95


Using Loops to Print the 2D Array
for (int i = 0; i < scores.length; i++) {        // Iterates over rows
    for (int j = 0; j < scores[i].length; j++) { // Iterates over columns
        System.out.print(scores[i][j] + " ");
    }
    System.out.println(); // Moves to the next line after each row
}


Full Example Program :

public class Main {
    public static void main(String[] args) {
        int[][] scores = {
            {85, 90, 78, 92},
            {88, 76, 93, 85},
            {91, 82, 89, 77}
        };

        // Printing the 2D array
        for (int i = 0; i < scores.length; i++) {
            for (int j = 0; j < scores[i].length; j++) {
                System.out.print(scores[i][j] + " ");
            }
            System.out.println();
        }
    }
}



Output
85 90 78 92
88 76 93 85
91 82 89 77


Program to Take Input for a 2D Array Using Scanner:


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Define the number of students and subjects
        int students = 3;
        int subjects = 4;
        
        // Declare a 2D array to store scores
        int[][] scores = new int[students][subjects];

        // Input scores from the user
        for (int i = 0; i < students; i++) {
            System.out.println("Enter scores for student " + (i + 1) + ":");
            for (int j = 0; j < subjects; j++) {
                System.out.print("Score for subject " + (j + 1) + ": ");
                scores[i][j] = scanner.nextInt(); // Read score
            }
        }

        // Print the scores
        System.out.println("\nScores entered:");
        for (int i = 0; i < students; i++) {
            for (int j = 0; j < subjects; j++) {
                System.out.print(scores[i][j] + " ");
            }
            System.out.println(); // Move to the next line after each row
        }
    }
}


Example Output

Enter scores for student 1:
Score for subject 1: 85
Score for subject 2: 90
Score for subject 3: 78
Score for subject 4: 92
Enter scores for student 2:
Score for subject 1: 88
Score for subject 2: 76
Score for subject 3: 93
Score for subject 4: 85
Enter scores for student 3:
Score for subject 1: 91
Score for subject 2: 82
Score for subject 3: 89
Score for subject 4: 77

Scores entered:
85 90 78 92 
88 76 93 85 
91 82 89 77 


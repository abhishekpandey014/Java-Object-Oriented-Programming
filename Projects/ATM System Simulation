Project Overview: ATM System Simulation

Objective:
The goal of this project is to create a simple ATM (Automated Teller Machine) system simulation using Java. The system will allow users to manage their bank accounts by performing basic operations like checking account details, inquiring about their balance, depositing money, and withdrawing cash.



Key Components:
User Class: This class represents a user interacting with the ATM. It includes methods to display a menu of options and handle user inputs for various account operations.

Account Class: This class stores information about a bank account, such as the account holder's name, mobile number, account number, and balance. It also has methods for generating a unique account number and managing the balance.

AccountManager Class: This class manages multiple accounts, allowing users to create new accounts or access existing ones using their PIN (Personal Identification Number). It keeps track of all accounts in a map structure for easy access.

ATMSystem Class: This is the main class that runs the program. It presents a welcome screen, offers options to create a new account or access an existing account, and handles user interactions.



Project Features:
Account Creation: Users can create a new bank account by providing their name, mobile number, a 4-digit PIN, and an initial deposit amount.

Account Access: Users can access their existing account by entering their PIN. If the PIN is valid, they will be able to perform various account operations.

Menu Options: Once logged in, users will see a menu with options to:

View account details (name, mobile number, account number)

Check the account balance

Deposit money into the account

Withdraw money from the account

Exit the application

Validation: The program includes checks to ensure users do not create multiple accounts with the same mobile number and cannot withdraw more money than they have in their account.



Learning Outcomes:
By working on this project, students will learn about:

Object-oriented programming concepts, such as classes and objects.

Data encapsulation through getter and setter methods.

How to manage user input and implement basic control flow with loops and conditionals.

The importance of data validation in real-world applications.
